<?xml version="1.0"  encoding="UTF-8" ?>

<!-- global file for MultiQuickButton functions -->

<xml>

<mqbfunction>
<name>VTI Restart SoftCam</name>
<code>print 'Stopping SoftCam'
self.session.open(MessageBox, _(" Restarting SoftCam"), MessageBox.TYPE_INFO, 5)
os.system('/etc/init.d/current_cam.sh restart')</code>
</mqbfunction>

<mqbfunction>
<name>HbbTV RedButton</name>
<code>from Screens.InfoBarGenerics import InfoBarRedButton
self.activateRedButton()</code>
</mqbfunction>

<mqbfunction>
<name>Extension Selection</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.showExtensionSelection(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>Plugin Browser</name>
<module>Screens.PluginBrowser</module>
<screen>PluginBrowser</screen>
</mqbfunction>

<mqbfunction>
<name>Sleeptimer</name>
<module>Screens.SleepTimerEdit</module>
<screen>SleepTimerEdit</screen>
</mqbfunction>

<mqbfunction>
<name>Timer</name>
<module>Screens.TimerEdit</module>
<screen>TimerEditList</screen>
</mqbfunction>

<mqbfunction>
<name>Channel zap +</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.zapDown(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>Channel zap -</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.zapUp(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>Channel zap (list) +</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.switchChannelUp(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>Channel zap (list) -</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.switchChannelDown(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>List of Bouquets</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	def showBouquetList(self):
		self.servicelist.showFavourites()
		self.session.execDialog(self.servicelist)
	showBouquetList(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>Channel list</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.openServiceList(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>Zap history back</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.historyBack(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>Zap history next</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.historyNext(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>InfoBar</name>
<code>from Screens.InfoBarGenerics import InfoBarShowHide
self.toggleShow()</code>
</mqbfunction>

<mqbfunction>
<name>InfoBar EventInfoPlugins</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.showEventInfoPlugins(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>InfoBar EventView</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.openEventView(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>InfoBar EPG</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.openSingleServiceEPG(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>InfoBar Multi EPG</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.openMultiServiceEPG(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>InfoBar Show Radio</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.showRadio(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>InfoBar Show Tv</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.showTv(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>InfoBar Show Movies</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.showMovies(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>InfoBar Record</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.instantRecord(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>InfoBar Instant Record</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.startInstantRecording(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>Start Timeshift</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.startTimeshift(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>Start Teletext</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.startTeletext(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>Subservice Selection</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.subserviceSelection(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>Subtitles</name>
<module>Screens.Subtitles</module>
<screen>Subtitles, self</screen>
</mqbfunction>

<mqbfunction>
<name>A/V Settings</name>
<module>Screens.Setup</module>
<screen>Setup, "avsetup"</screen>
</mqbfunction>

<mqbfunction>
<name>InfoBar Audio Selection</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.audioSelection(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>AutoResolution on/off</name>
<code>from Plugins.SystemPlugins.AutoResolution.plugin import *
if config.plugins.autoresolution.enable.value == True:
	config.plugins.autoresolution.enable.value = False
	msg = _("AutoResolution is disabled")
else:
	config.plugins.autoresolution.enable.value = True
	msg = _("AutoResolution is enabled")
config.plugins.autoresolution.enable.save()
from Screens.MessageBox import MessageBox
self.session.open(MessageBox, msg, MessageBox.TYPE_INFO, 2)</code>
</mqbfunction>

<mqbfunction>
<name>Dolby Digital downmix on/off</name>
<code>if config.av.downmix_ac3.value == False:
	config.av.downmix_ac3.value = True
else:
	config.av.downmix_ac3.value = False
config.av.downmix_ac3.save()
from Screens.MessageBox import MessageBox
downmix = {True: _("eingeschaltet"), False: _("ausgeschaltet")}
self.session.open(MessageBox, _("Dolby Digital downmix: ") + downmix[config.av.downmix_ac3.value], MessageBox.TYPE_INFO, 2)</code>
</mqbfunction>

<mqbfunction>
<name>Switch 4:3 (Pillarbox) (Pan&amp;Scan)</name>
<code>if config.av.policy_43.value == "pillarbox":
	config.av.policy_43.value = "panscan"
else:
	config.av.policy_43.value = "pillarbox"
	config.av.policy_43.save()
from Screens.MessageBox import MessageBox
aspectratio = {"panscan": _("Pan&amp;Scan"), "pillarbox": _("Pillarbox")}
self.session.open(MessageBox, _("Display 4:3 content as\n") + aspectratio[config.av.policy_43.value], MessageBox.TYPE_INFO, 2)</code>
</mqbfunction>

<mqbfunction>
<name>Show PIP</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.showPiP(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>Swap PIP</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.swapPiP(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>Move PIP</name>
<code>from Screens.InfoBar import InfoBar
if InfoBar and InfoBar.instance:
	InfoBar.movePiP(InfoBar.instance)</code>
</mqbfunction>

<mqbfunction>
<name>Toggle AtmoLight</name>
<code>os.system('/etc/init.d/atmolight toggle 1>/dev/null 2>/dev/null')</code>
</mqbfunction>

<mqbfunction>
<name>GUI Restart</name>
<code>import Screens.Standby
self.session.open(Screens.Standby.TryQuitMainloop,3)</code>
</mqbfunction>

<mqbfunction>
<name>Reboot</name>
<code>import Screens.Standby
self.session.open(Screens.Standby.TryQuitMainloop,2)</code>
</mqbfunction>

<mqbfunction>
<name>DeepStandby</name>
<code>import Screens.Standby
self.session.open(Screens.Standby.TryQuitMainloop,1)</code>
</mqbfunction>

<mqbfunction>
<name>HDMI-CEC TV on</name>
<code>from enigma import eHdmiCEC
import struct
self.session.open(MessageBox, _("HDMI-CEC message was sent"), MessageBox.TYPE_INFO, 3)
address = int("0",16)
cecmessage = int("04",16)
cmd = struct.pack('B',cecmessage)
eHdmiCEC.getInstance().sendMessage(address, len(cmd), str(cmd))</code>
</mqbfunction>

<mqbfunction>
<name>HDMI-CEC TV off</name>
<code>from enigma import eHdmiCEC
import struct
self.session.open(MessageBox, _("HDMI-CEC message was sent"), MessageBox.TYPE_INFO, 3)
address = int("0",16)
cecmessage = int("36",16)
cmd = struct.pack('B',cecmessage)
eHdmiCEC.getInstance().sendMessage(address, len(cmd), str(cmd))</code>
</mqbfunction>

<mqbfunction>
<name>HDMI-CEC A/V on</name>
<code>from enigma import eHdmiCEC
import struct
self.session.open(MessageBox, _("HDMI-CEC message was sent"), MessageBox.TYPE_INFO, 3)
address = int("5",16)
cecmessage = int("44",16)
cecmessagetwo = int("6D",16)
cmd = struct.pack('BB',cecmessage,cecmessagetwo)
eHdmiCEC.getInstance().sendMessage(address, len(cmd), str(cmd))</code>
</mqbfunction>

<mqbfunction>
<name>HDMI-CEC A/V off</name>
<code>from enigma import eHdmiCEC
import struct
self.session.open(MessageBox, _("HDMI-CEC message was sent"), MessageBox.TYPE_INFO, 3)
address = int("5",16)
cecmessage = int("44",16)
cecmessagetwo = int("6C",16)
cmd = struct.pack('BB',cecmessage,cecmessagetwo)
eHdmiCEC.getInstance().sendMessage(address, len(cmd), str(cmd))</code>
</mqbfunction>

<mqbfunction>
<name>HDMI-CEC A/V Volume +</name>
<code>from enigma import eHdmiCEC
import struct
address = int("5",16)
cecmessage = int("44",16)
cecmessagetwo = int("41",16)
cmd = struct.pack('BB',cecmessage,cecmessagetwo)
eHdmiCEC.getInstance().sendMessage(address, len(cmd), str(cmd))</code>
</mqbfunction>

<mqbfunction>
<name>HDMI-CEC A/V Volume -</name>
<code>from enigma import eHdmiCEC
import struct
address = int("5",16)
cecmessage = int("44",16)
cecmessagetwo = int("42",16)
cmd = struct.pack('BB',cecmessage,cecmessagetwo)
eHdmiCEC.getInstance().sendMessage(address, len(cmd), str(cmd))</code>
</mqbfunction>

<mqbfunction>
<name>HDMI-CEC A/V Volume mute</name>
<code>from enigma import eHdmiCEC
import struct
address = int("5",16)
cecmessage = int("44",16)
cecmessagetwo = int("43",16)
cmd = struct.pack('BB',cecmessage,cecmessagetwo)
eHdmiCEC.getInstance().sendMessage(address, len(cmd), str(cmd))</code>
</mqbfunction>

<mqbfunction>
<name>Volume +</name>
<code><![CDATA[from enigma import eActionMap
keyaction = eActionMap.getInstance()
keyaction.keyPressed("dreambox remote control (native)", 115, int(0))]]></code>
</mqbfunction>

<mqbfunction>
<name>Volume -</name>
<code><![CDATA[from enigma import eActionMap
keyaction = eActionMap.getInstance()
keyaction.keyPressed("dreambox remote control (native)", 114, int(0))]]></code>
</mqbfunction>

<mqbfunction>
<name>Mute on/off</name>
<code><![CDATA[from enigma import eActionMap
keyaction = eActionMap.getInstance()
keyaction.keyPressed("dreambox remote control (native)", 113, int(0))]]></code>
</mqbfunction>

<mqbfunction>
<name>Remount Network Shares</name>
<code>from Plugins.SystemPlugins.NetworkBrowser.AutoMount import AutoMount
AutoMount()</code>
</mqbfunction>

<mqbfunction>
<name>VTI Panel</name>
<module>Plugins.SystemPlugins.VTIPanel.plugin</module>
<screen>VTIMainMenu, self</screen>
</mqbfunction>

<mqbfunction>
<name>VTI News</name>
<module>Plugins.SystemPlugins.VTIPanel.plugin</module>
<screen>VtiNews, self</screen>
</mqbfunction>

<mqbfunction>
<name>VTI EPG Settings</name>
<module>Plugins.SystemPlugins.VTIPanel.EPGPanel</module>
<screen>EPGPanel, self</screen>
</mqbfunction>

<mqbfunction>
<name>VTI DeviceManager</name>
<module>Plugins.SystemPlugins.DeviceManager2.plugin</module>
<screen>DeviceManager2, self</screen>
</mqbfunction>

<mqbfunction>
<name>VTI CamCenter</name>
<module>Plugins.SystemPlugins.VTIPanel.plugin</module>
<screen>CamSelectMenu, self</screen>
</mqbfunction>

<mqbfunction>
<name>VTI Backup Tools</name>
<module>Plugins.SystemPlugins.VTIPanel.plugin</module>
<screen>VTISubMenu,0</screen>
</mqbfunction>

<mqbfunction>
<name>VTI Image Tools</name>
<module>Plugins.SystemPlugins.VTIPanel.plugin</module>
<screen>VTISubMenu,2</screen>
</mqbfunction>

<mqbfunction>
<name>VTI System Tools</name>
<module>Plugins.SystemPlugins.VTIPanel.plugin</module>
<screen>VTISubMenu,3</screen>
</mqbfunction>

<mqbfunction>
<name>VTI Info Tools</name>
<module>Plugins.SystemPlugins.VTIPanel.plugin</module>
<screen>VTISubMenu,4</screen>
</mqbfunction>

<mqbfunction>
<name>VTI Manual Package Installation</name>
<module>Plugins.SystemPlugins.VTIPanel.plugin</module>
<screen>VTISubMenu,1</screen>
</mqbfunction>

<mqbfunction>
<name>VTI BitrateViewer</name>
<module>Plugins.SystemPlugins.VTIPanel.plugin</module>
<screen>BitrateViewer, self</screen>
</mqbfunction>

<mqbfunction>
<name>VTI System InfoPanel</name>
<module>Plugins.SystemPlugins.VTIPanel.InfoPanel</module>
<screen>InfoPanel, self</screen>
</mqbfunction>

<mqbfunction>
<name>VTI BackupSuite (Restore)</name>
<module>Plugins.SystemPlugins.VTIPanel.BackupSuite</module>
<screen>BackupSuite, self, "restore"</screen>
</mqbfunction>

<mqbfunction>
<name>VTI BackupSuite (Backup)</name>
<module>Plugins.SystemPlugins.VTIPanel.BackupSuite</module>
<screen>BackupSuite, self, "backup"</screen>
</mqbfunction>

<mqbfunction>
<name>VTI CronManager</name>
<module>Plugins.SystemPlugins.VTIPanel.CronManager</module>
<screen>CronManager, self</screen>
</mqbfunction>

<mqbfunction>
<name>VTI ExeManager</name>
<module>Plugins.SystemPlugins.VTIPanel.ExeManager</module>
<screen>ExeManager, self</screen>
</mqbfunction>

<mqbfunction>
<name>CoolTVGuide</name>
<code><![CDATA[from Plugins.Extensions.CoolTVGuide.plugin import main
main(self.session, self.servicelist)]]></code>
</mqbfunction>

<mqbfunction>
<name>CoolEasyGuide</name>
<code><![CDATA[from Plugins.Extensions.CoolTVGuide.CoolEasyGuide import CEGmain
CEGmain(self.session, self.servicelist)]]></code>
</mqbfunction>

<mqbfunction>
<name>CoolSingleGuide</name>
<code><![CDATA[from Plugins.Extensions.CoolTVGuide.CoolSingleGuide import CSGmain
CSGmain(self.session, self.servicelist)]]></code>
</mqbfunction>

<mqbfunction>
<name>CoolInfoGuide</name>
<code><![CDATA[from Plugins.Extensions.CoolTVGuide.CoolInfoGuide import CIGmain
CIGmain(self.session, self.servicelist)]]></code>
</mqbfunction>

<mqbfunction>
<name>MediaPlayer</name>
<module>Plugins.Extensions.MediaPlayer.plugin</module>
<screen>MediaPlayer</screen>
</mqbfunction>

<mqbfunction>
<name>DVDPlayer</name>
<module>Plugins.Extensions.DVDPlayer.plugin</module>
<screen>DVDPlayer</screen>
</mqbfunction>

<mqbfunction>
<name>Picture Player</name>
<module>Plugins.Extensions.PicturePlayer.plugin</module>
<screen>picshow</screen>
</mqbfunction>

<mqbfunction>
<name>Volume -</name>
<code><![CDATA[from GlobalActions import globalActionMap
globalActionMap.actions['volumeDown']()]]></code>
</mqbfunction>

<mqbfunction>
<name>Volume +</name>
<code><![CDATA[from GlobalActions import globalActionMap
globalActionMap.actions['volumeUp']()]]></code>
</mqbfunction>

<mqbfunction>
<name>Mute</name>
<code><![CDATA[from GlobalActions import globalActionMap
globalActionMap.actions['volumeMute']()]]></code>
</mqbfunction>

<mqbfunction>
<name>Power</name>
<code><![CDATA[from GlobalActions import globalActionMap
globalActionMap.actions['power_up']()]]></code>
</mqbfunction>

<mqbfunction>
<name>Power long</name>
<code><![CDATA[from GlobalActions import globalActionMap
globalActionMap.actions['power_long']()]]></code>
</mqbfunction>

</xml>